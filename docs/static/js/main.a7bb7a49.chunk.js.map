{"version":3,"sources":["components/AgregarCategoria.js","helpers/getGifs.js","components/GridImagen.js","components/GridImagenes.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AgregarCategoria","setCats","cats","useState","inputValue","setInputValue","id","type","value","onChange","e","target","onClick","trim","length","find","v","c","getGifs","cat","a","url","encodeURI","fetch","respuesta","json","datos","data","imagenes","map","titulo","title","images","downsized_medium","GridImagen","className","src","alt","GridImagenes","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","categorias","setCategorias","ReactDOM","render","document","getElementById"],"mappings":"uMA8CeA,EA1CU,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,KAAY,EAEVC,mBAAU,IAFA,mBAExCC,EAFwC,KAE5BC,EAF4B,KAoBhD,OACE,qCACE,uBACEC,GAAG,iBACHC,KAAK,OACLC,MAAQJ,EACRK,SAtBqB,SAAEC,GAC3BL,EAAeK,EAAEC,OAAOH,UAuBtB,wBACED,KAAK,SACLK,QAtBqB,SAAEF,GAGvBN,EAAWS,OAAOC,OAAS,IAAMZ,EAAKa,MAAM,SAAAC,GAAC,OAAIA,IAAMZ,MAEzDH,GAAS,SAAAgB,GAAC,OAAMb,EAAWS,QAAjB,mBAA4BI,OAGxCZ,EAAe,KAYb,yB,+BC/BOa,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAGfC,EAHe,iDAGkCC,UAAWH,GAH7C,+DAIGI,MAAOF,GAJV,cAIfG,EAJe,gBAKQA,EAAUC,OALlB,uBAKRC,EALQ,EAKbC,KAIFC,EAAWF,EAAMG,KAAK,SAAAnB,GAAC,MAAM,CAC3BJ,GAAKI,EAAEJ,GACPwB,OAASpB,EAAEqB,MACXV,IAAMX,EAAEsB,OAAOC,iBAAiBZ,QAZnB,kBAebO,GAfa,4CAAH,sDCYLM,EAVI,SAAC,GAA0B,EAAvB5B,GAAwB,IAApBwB,EAAmB,EAAnBA,OAAQT,EAAW,EAAXA,IAEjC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAMf,EAAMgB,IAAMP,IACvB,4BAAKA,QCgCIQ,EAnCM,SAAC,GAAe,IAAZnB,EAAW,EAAXA,IAAW,ECAR,SAAEA,GAAU,IAAD,EAEThB,mBAAU,CACpCwB,KAAO,GACPY,SAAU,IAJyB,mBAE7BC,EAF6B,KAEtBC,EAFsB,KAmBrC,OAZAC,qBAAW,WAETxB,EAASC,GACNwB,MAAM,SAAAC,GAAI,OACPH,EAAU,CACRd,KAAOiB,EACPL,SAAU,SAIjB,CAAEpB,IAEEqB,EDT4BK,CAAc1B,GAApCS,EAVqB,EAU1BD,KAAeY,EAVW,EAUXA,QAKvB,OACE,qCACE,6BAAMpB,IAEJoB,GAAW,4CAEb,qBAAKJ,UAAU,YAAf,SAEEP,EAASC,KAAK,SAAAiB,GAAG,OACf,cAAC,EAAD,eAGOA,GAFCA,EAAIxC,aEtBhByC,EAAe,WAAO,IAAD,EAEa5C,mBAAU,CAAE,YAFzB,mBAEjB6C,EAFiB,KAELC,EAFK,KAsBzB,OACE,qCACE,8CAEA,cAAC,EAAD,CAAkBhD,QAAUgD,EAAgB/C,KAAO8C,IACnD,uBAGEA,EAAWnB,KAAK,SAAAZ,GAAC,OACb,cAAC,EAAD,CAEEE,IAAMF,GADAA,U,MClCpBiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a7bb7a49.chunk.js","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AgregarCategoria = ( { setCats, cats } ) => {\r\n\r\n  const [ inputValue, setInputValue ] = useState( '' );\r\n  \r\n  const handlerChangeValue = ( e ) => {\r\n    setInputValue( e.target.value );\r\n  };\r\n  \r\n  const handlerSubmitValue = ( e ) => {\r\n    \r\n    // Evaluamos si ya existe el valor en el array\r\n    if( inputValue.trim().length > 0 && !cats.find( v => v === inputValue ) ){\r\n      // Agregamos el valor al Array de categorías\r\n      setCats( c => [ inputValue.trim(), ...c ] );\r\n    }\r\n\r\n    setInputValue( '' ); // limpiamos el valor del input\r\n\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <input\r\n        id=\"inputCategoria\"\r\n        type=\"text\"\r\n        value={ inputValue }\r\n        onChange={ handlerChangeValue }\r\n      />\r\n      <button\r\n        type=\"button\"\r\n        onClick={ handlerSubmitValue }\r\n      >Aceptar</button>\r\n    </>\r\n  )\r\n}\r\n\r\nAgregarCategoria.propTypes = {\r\n  setCats : PropTypes.func.isRequired,\r\n  cats : PropTypes.array.isRequired\r\n}\r\n\r\n\r\nexport default AgregarCategoria\r\n","\r\nexport const getGifs = async ( cat ) => {\r\n\r\n  // URL creada con PostMan con la información de Giphy\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( cat ) }&limit=10&api_key=Qw2H1f20DXilRsLWQa3PJlJHjyTy25Fl`;\r\n  const respuesta = await fetch( url );\r\n  const { data:datos } = await respuesta.json();\r\n\r\n  // console.log( datos );\r\n\r\n  const imagenes = datos.map( e => ( {\r\n          id : e.id,\r\n          titulo : e.title,\r\n          url : e.images.downsized_medium.url\r\n        } ) );\r\n  \r\n  return( imagenes );\r\n\r\n  // setListImgs( imagenes );\r\n\r\n}\r\n","\r\nimport React from 'react'\r\n\r\nconst GridImagen = ( { id, titulo, url } ) => {\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={ url } alt={ titulo } />\r\n      <p>{ titulo }</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GridImagen\r\n","\r\nimport React/* , { useState, useEffect } */ from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GridImagen from './GridImagen';\r\n\r\nconst GridImagenes = ( { cat } ) => {\r\n  \r\n  // const [ listImgs, setListImgs ] = useState( [] );\r\n\r\n  // // El useEffect servirá para que se ejecute la función sólo cuando se carga el componente\r\n  // useEffect( () => {\r\n  //   getGifs( cat )\r\n  //     .then( imgs => setListImgs( imgs ) ) // lo mismo : .then( setListImgs )\r\n  // }, [ cat] );\r\n\r\n  const { data:imagenes, loading } = useFetchGifs( cat );\r\n\r\n\r\n  // La función getGifs se fue a helpers/getGifs.js\r\n\r\n  return (\r\n    <>\r\n      <h3>{ cat }</h3>\r\n\r\n      { loading && <p>Cargando...</p> }\r\n\r\n      <div className=\"card-grid\">\r\n        {\r\n        imagenes.map( img => (\r\n          <GridImagen\r\n            key={ img.id }\r\n            // Atención : se envía el objeto 'img' con el operador Spread\r\n            { ...img } />\r\n         ) )\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GridImagenes;\r\n","\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = ( cat ) => {\r\n\r\n  const [ state, setState ] = useState( {\r\n    data : [],\r\n    loading : true\r\n  } );\r\n\r\n  useEffect( () => {\r\n    \r\n    getGifs( cat )\r\n      .then( imgs => \r\n          setState( {\r\n            data : imgs,\r\n            loading : false\r\n          } )\r\n      );\r\n\r\n  }, [ cat ] );\r\n\r\n  return state;\r\n\r\n}\r\n","\r\n// Estructura de Archivos : https://es.reactjs.org/docs/faq-structure.html\r\n// Structuring projects and naming components in React : https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76\r\n\r\nimport React, { useState } from 'react';\r\nimport AgregarCategoria from './components/AgregarCategoria';\r\nimport GridImagenes from './components/GridImagenes';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [ categorias, setCategorias ] = useState( [ 'Puppies' ] );\r\n\r\n  /* \r\n  const handleAgregarCategoria = ( e ) => {\r\n\r\n    if( categorias.find( e => e === 'Nuevo Elemento' ) ){ return false; }\r\n\r\n    setCategorias( [ ...categorias, 'Nuevo Elemento' ] );\r\n    \r\n    // Otra opción, en donde utilizamos el 'callback function' :\r\n    // setCategorias( c => [ ...c, 'Nuevo Elemento' ] );\r\n\r\n    // Una forma extendida que hace lo mismo\r\n    // let newCats = [...categorias]; // = categorias.map( c => c ); = categorias.slice(); = [].concat( categorias );\r\n    //     newCats.push( 'Nuevo Elemento' );\r\n    // setCategorias( newCats );\r\n\r\n  }\r\n */\r\n  \r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      {/* Enviamos la función para agregar categorías al componente */}\r\n      <AgregarCategoria setCats={ setCategorias } cats={ categorias } />\r\n      <hr />\r\n      {\r\n        // El 'key' del list item no debe ser el índice en el Array\r\n        categorias.map( c => (\r\n            <GridImagenes\r\n              key={ c }\r\n              cat={ c } />\r\n          ) )\r\n      }\r\n      {/* <button onClick={ handleAgregarCategoria }>Agregar Categoría</button> */}\r\n    </>\r\n  )\r\n\r\n};\r\n\r\nexport {\r\n  GifExpertApp as default\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}